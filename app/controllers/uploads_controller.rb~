class UploadsController < ApplicationController
  before_action :set_upload, only: [:show, :edit, :update, :destroy]
  skip_before_filter :verify_authenticity_token

  # GET /uploads
  # GET /uploads.json
  def index
    @uploads = Upload.all
    @upload = Upload.new
  end

  # GET /uploads/1
  # GET /uploads/1.json
  def show
  end

  def content
    @uploads = Upload.all
    @upload = Upload.new
  end

def registration

    @registration = Registration.new(:username => params[:registration][:username],:password => params[:registration][:password],:name => params[:registration][:name],:email => params[:registration][:email])
    @registration.save
  end

   def info
  @uploads1 = Upload.where( filename: /.*\.(jpeg|png|gif|jpg)/i ).order("count DESC").page params[:page_img]
  @uploads2=  Upload.where( filename: /.*\.(pdf)/i ).order("count DESC").page params[:page_pdf]
  @uploads3 = Upload.where( filename: /.*\.(doc|docx)/i ).order("count DESC").page params[:page_doc]
     
  end


  # GET /uploads/new
  def new
    @upload = Upload.new
  end

  def admin
    @user = User.new
  end 

def admin_view
     @users=User.all
      @users.each do |user| 
         @un=user.username
         @pw=user.password
      end
     
  begin
   if @un == params[:user][:username] and @pw == params[:user][:password]
    @uploads1 = Upload.where( filename: /.*\.(jpeg|png|gif|jpg)/i ).order("count DESC").page params[:page_img]
  @uploads2=  Upload.where( filename: /.*\.(pdf)/i ).order("count DESC").page params[:page_pdf]
  @uploads3 = Upload.where( filename: /.*\.(doc|docx)/i ).order("count DESC").page params[:page_doc]
 
     
   else
     respond_to do |format|
       format.html { redirect_to "/admin" ,notice: 'Invalid Credentials'}
     end
   end
   rescue 
    respond_to do |format|
       format.html { redirect_to "/admin" }
     end
   end

end




  def sendmail
    
    @email_user = params[:email]
    @subject = params[:body]
    @src = params[:src]

    @mail=params[:email]
    @id=params[:idref]
    @email = Mailid.new(:mail => @mail,:upload_id => @id)
    @email.save
    @upload = Upload.find(@id)
    @upload.update_attributes(:count => ((@upload.count.nil? ? 0 : @upload.count) + @email.mail.split(",").size) )
    UserMailer.welcome_mail(@email_user,@subject,@src).deliver
    respond_to do |format|
    
    
    format.html { redirect_to uploads_url, :notice => "Mail was successfully sent to #{@email_user}" }

    end
  end

  # GET /uploads/1/edit
  def edit
  end

  # POST /uploads
  # POST /uploads.json
  def create
    @fn=params[:upload][:file].original_filename
    @upload = Upload.new(upload_params)
    @upload.update(:filename => @fn)
    @uploads = Upload.all

    respond_to do |format|
      if @upload.save
        format.html { redirect_to uploads_path, notice: 'Upload was successfully created.' }
        format.json { render :show, status: :created, location: @upload }
      else
        format.html { render :new }
        format.json { render json: @upload.errors, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT /uploads/1
  # PATCH/PUT /uploads/1.json
  def update
    respond_to do |format|
      if @upload.update(upload_params)
        format.html { redirect_to @upload, notice: 'Upload was successfully updated.' }
        format.json { render :show, status: :ok, location: @upload }
      else
        format.html { render :edit }
        format.json { render json: @upload.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /uploads/1
  # DELETE /uploads/1.json
  def destroy
    @upload.destroy
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_upload
      @upload = Upload.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def upload_params
      params.require(:upload).permit(:file, :mailid)
    end
end
